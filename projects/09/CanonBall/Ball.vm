function Ball.new 0
push constant 11
call Memory.alloc 1
pop pointer 0
push argument 0
pop this 0
push argument 1
pop this 1
push argument 3
pop this 2
push argument 2
pop this 3
push this 0
pop this 4
push this 1
pop this 5
push constant 2
pop this 8
push constant 0
pop this 9
push constant 0
pop this 10
push pointer 0
push constant 0
not
call Ball.draw 2
pop temp 0
push pointer 0
return
function Ball.dispose 0
push argument 0
pop pointer 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
function Ball.crashed 0
push argument 0
pop pointer 0
push this 10
return
function Ball.printCoords 0
push argument 2
push argument 3
call Output.moveCursor 2
pop temp 0
push constant 32
call Output.printChar 1
pop temp 0
push constant 32
call Output.printChar 1
pop temp 0
push constant 32
call Output.printChar 1
pop temp 0
push constant 32
call Output.printChar 1
pop temp 0
push constant 32
call Output.printChar 1
pop temp 0
push constant 32
call Output.printChar 1
pop temp 0
push constant 32
call Output.printChar 1
pop temp 0
push argument 2
push argument 3
call Output.moveCursor 2
pop temp 0
push argument 0
call Output.printInt 1
pop temp 0
push constant 32
call Output.printChar 1
pop temp 0
push argument 1
call Output.printInt 1
pop temp 0
push constant 0
return
function Ball.draw 0
push argument 0
pop pointer 0
push this 4
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
not
pop this 10
push constant 0
return
label IF_FALSE0
push this 4
push this 8
add
push constant 509
gt
push this 5
push this 8
add
push constant 253
gt
or
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
not
pop this 10
push constant 0
return
label IF_FALSE1
push argument 1
call Screen.setColor 1
pop temp 0
push this 4
push this 5
call Screen.drawPixel 2
pop temp 0
push constant 0
return
function Ball.deleteTrace 2
push argument 0
pop pointer 0
push this 4
pop local 0
push this 5
pop local 1
push this 0
pop this 4
push this 1
pop this 5
push constant 0
pop this 9
push constant 0
pop this 10
label WHILE_EXP0
push this 10
not
push this 4
push local 0
eq
not
and
push this 5
push local 1
eq
not
and
not
if-goto WHILE_END0
push pointer 0
push constant 0
call Ball.move 2
pop temp 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Ball.move 7
push argument 0
pop pointer 0
push this 0
push this 2
push this 3
call Trig.cos 1
call Math.multiply 2
push this 9
call Math.multiply 2
push constant 10
call Math.divide 2
add
pop local 0
push this 1
push this 2
push this 3
call Trig.sin 1
call Math.multiply 2
push this 9
call Math.multiply 2
push constant 10
call Math.divide 2
sub
push this 9
push this 9
call Math.multiply 2
push constant 2
call Math.divide 2
add
pop local 1
push this 9
push constant 1
add
pop this 9
push this 4
pop this 6
push this 5
pop this 7
push local 0
push this 6
sub
pop local 2
push local 1
push this 7
sub
pop local 3
push constant 0
pop local 4
push constant 0
pop local 5
push constant 0
pop local 6
label WHILE_EXP0
push local 4
push local 2
eq
not
push local 5
push local 3
eq
not
and
push this 10
not
and
not
if-goto WHILE_END0
push this 6
push local 4
add
pop this 4
push this 7
push local 5
add
pop this 5
push this 5
push constant 10
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push pointer 0
push argument 1
call Ball.draw 2
pop temp 0
label IF_FALSE0
push argument 1
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 3
call Sys.wait 1
pop temp 0
label IF_FALSE1
push local 6
push constant 0
lt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 3
push constant 0
gt
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push local 4
push constant 1
add
pop local 4
push local 6
push local 3
add
pop local 6
goto IF_END3
label IF_FALSE3
push local 5
push constant 1
sub
pop local 5
push local 6
push local 2
add
pop local 6
label IF_END3
goto IF_END2
label IF_FALSE2
push local 3
push constant 0
gt
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push local 5
push constant 1
add
pop local 5
push local 6
push local 2
sub
pop local 6
goto IF_END4
label IF_FALSE4
push local 4
push constant 1
add
pop local 4
push local 6
push local 3
add
pop local 6
label IF_END4
label IF_END2
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Ball.is_collision 7
push argument 0
pop pointer 0
push this 4
push this 6
sub
pop local 0
push this 5
push this 7
sub
pop local 1
push local 1
pop local 2
push local 0
neg
pop local 3
push local 1
push this 6
call Math.multiply 2
neg
push local 0
push this 7
call Math.multiply 2
add
pop local 4
push this 6
push argument 1
gt
not
push argument 1
push this 4
gt
not
and
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 2
push argument 1
call Math.multiply 2
neg
push local 4
sub
pop local 6
push local 3
push argument 2
call Math.multiply 2
push local 6
lt
not
push local 6
push local 3
push argument 4
call Math.multiply 2
lt
not
and
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
not
return
label IF_FALSE1
label IF_FALSE0
push this 7
push argument 4
lt
not
push argument 4
push this 5
lt
not
and
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 3
push argument 4
call Math.multiply 2
neg
push local 4
sub
pop local 5
push local 2
push argument 1
call Math.multiply 2
push local 5
lt
not
push local 5
push local 2
push argument 3
call Math.multiply 2
lt
not
and
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 0
not
return
label IF_FALSE3
label IF_FALSE2
push this 7
push argument 2
gt
not
push argument 2
push this 5
gt
not
and
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push local 3
push argument 2
call Math.multiply 2
neg
push local 4
sub
pop local 5
push local 2
push argument 1
call Math.multiply 2
push local 5
gt
not
push local 5
push local 2
push argument 3
call Math.multiply 2
gt
not
and
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push constant 0
not
return
label IF_FALSE5
label IF_FALSE4
push constant 0
return
