
/** Implements the shooting cannon */
class Cannon {
    field int angle; // cannon shooting angle (0..90)
    field int range; // cannon shooting range (1..3)

    /** Constructs a new cannon */
    constructor Cannon new() {
        do drawBase();
        let angle = 45;
        let range = 2;
        do Output.moveCursor(0,15);
        do Output.printString("Elevation: ");
        do printAngle();
        do Output.moveCursor(0,30);
        do Output.printString("Initial speed: ");
        do printRange();
        do draw();
        return this;
    }

    /** Disposes this cannon. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    method void printAngle() {
        do Output.moveCursor(0,26);
        do Output.printChar(32);
        do Output.printChar(32);
        do Output.moveCursor(0,26);
        do Output.printInt(angle);

        return;
    }

    method void printRange() {
        do Output.moveCursor(0,45);
        do Output.printInt(range);

        return;
    }

    /** move up/down cannon according to direction
        @param direction cannon shooting direction: +1: up, -1: down
     */
    method void move(int direction) {
        var int new_angle;

        let new_angle = angle;

        if (direction > 0) {
            let new_angle = new_angle + 1;
        } else {
            if (direction < 0) {
                let new_angle = new_angle - 1;
            }
        }

        if (new_angle < 0) {
            let new_angle = 0;
        } else {
            if (new_angle > 90) {
                let new_angle = 90;
            }
        }

        if (~(new_angle = angle)) {
            do Screen.setColor(false);
            do draw();
            let angle = new_angle;
            do Screen.setColor(true);
            do draw();
            do printAngle();
        }

        return;
    }

    /** change the cannon range (aka ball initial speed)
        @param r +1 to increment range, -1 to decrement
     */
    method void changeRange(int r) {
        var int new_range;

        let new_range = range;

        if (r > 0) {
            let new_range = new_range + 1;
        } else {
            if (r < 0) {
                let new_range = new_range - 1;
            }
        }

        if (new_range < 1) {
            let new_range = 1;
        } else {
            if (new_range > 3) {
                let new_range = 3;
            }
        }

        if (~(new_range = range)) {
            do Screen.setColor(false);
            do draw();
            let range = new_range;
            do Screen.setColor(true);
            do draw();
        }

        do printRange();

        return;
    }

    /** the current shooting range */
    method int range() {
        return range;
    }

    /** Draw the base of the cannon at the lower left corner of the screen */
    method void drawBase() {
        var int location;
        var int memAddress;

        // the cannon base is a simple bitmap of 16x16 pixels generated with
        // the BitmapEditor
        let location = (256-16)*32;
	let memAddress = 16384+location;

        do Memory.poke(memAddress+0, 7);
	do Memory.poke(memAddress+32, 63);
	do Memory.poke(memAddress+64, 255);
	do Memory.poke(memAddress+96, 1023);
	do Memory.poke(memAddress+128, 2047);
	do Memory.poke(memAddress+160, 4095);
	do Memory.poke(memAddress+192, 4095);
	do Memory.poke(memAddress+224, 8191);
	do Memory.poke(memAddress+256, 16383);
	do Memory.poke(memAddress+288, 16383);
	do Memory.poke(memAddress+320, 32767);
	do Memory.poke(memAddress+352, 32767);
	do Memory.poke(memAddress+384, 32767);
	do Memory.poke(memAddress+416, -1);
	do Memory.poke(memAddress+448, -1);
	do Memory.poke(memAddress+480, -1);

	return;
    }

    /** Draw the cannon chase with the incliation given by the angle field */
    method void draw() {
        var int x1,y1,x2,y2;
        // the chase has a length of 40 pixels
        let x1 = 16*Trig.cos(angle)/100;
        let y1 = 16*Trig.sin(angle)/100;
        do Screen.drawLine(x1,255-y1,x(),y());
        return;
    }

    /** the x coordinate of the tip of the cannon chase */
    method int x() {
        return 40*Trig.cos(angle)/100;
    }

    /** the y coordinate of the tip of the cannon chase */
    method int y() {
        return 255-(40*Trig.sin(angle)/100);
    }

    /** the current shooting angle */
    method int angle() {
        return angle;
    }
}
