// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/09/Square/Square.jack

/** Implements a graphical square. */
class Square {

   field int x, y;         // screen location of the square's top-left corner
   field int size;         // length of this square, in pixels
   field int direction;  //square direction
   field Food food;    

   /** Constructs a new square with a given location and size. */
   constructor Square new(int Ax, int Ay, int Adirection) {
      let x = Ax;
      let y = Ay;
      let direction = Adirection; 
      let size = 7;
      do draw();
      return this;
   }
   

   /** Disposes this square. */
   method void dispose() {
      do Memory.deAlloc(this);
      return;
   }

   /** Draws the square on the screen. */
   method void draw() {
      do Screen.setColor(true);
      do Screen.drawRectangle(x, y, x + size, y + size);
      return;
   }

   /** Erases the square from the screen. */
   method void erase() {
      do Screen.setColor(false);
      do Screen.drawRectangle(x, y, x + size, y + size);
      return;
   }
   
   /** get square direction */ 
   method int getSquareDirection(){
      return direction;
   }

   /** turn squre direcion */
   method void turnSquareDirection(int Adirection){
      let direction = Adirection;
      return;
   }


	
   /** Moves the square up by 2 pixels. */
   method void moveUp() {
      if (y > 1) {
         do Screen.setColor(false);
         do Screen.drawRectangle(x, (y + size) - 7, x + size, y + size);
         let y = y - 8;
         do Screen.setColor(true);
         do Screen.drawRectangle(x, y, x + size, y + 7);
      }
      else{
         do Output.moveCursor(10,25);
         do Output.printString("Game Over");
         do Sys.halt();
      }
      return ;
   }

   /** Moves the square down by 2 pixels. */
   method void moveDown() {
      if ((y + size) < 238) {
         do Screen.setColor(false);
         do Screen.drawRectangle(x, y, x + size, y + 7);
         let y = y + 8;
         do Screen.setColor(true);
         do Screen.drawRectangle(x, (y + size) - 7, x + size, y + size);
      }
      else{
         do Output.moveCursor(10,25);
         do Output.printString("Game Over");
         do Sys.halt();
      }
      return ;
   }

   /** Moves the square left by 2 pixels. */
   method void moveLeft() {
      if (x > 1) {
         do Screen.setColor(false);
         do Screen.drawRectangle((x + size) - 7, y, x + size, y + size);
         let x = x - 8;
         do Screen.setColor(true);
         do Screen.drawRectangle(x, y, x + 7, y + size);
      }
      else{
         do Output.moveCursor(10,25);
         do Output.printString("Game Over");
         do Sys.halt();
      }
       return ;
   }

   /** Moves the square right by 2 pixels. */
   method void moveRight() {
      if ((x + size) < 510) {
         do Screen.setColor(false);
         do Screen.drawRectangle(x, y, x + 7, y + size);
         let x = x + 8;
         do Screen.setColor(true);
         do Screen.drawRectangle((x + size) - 7, y, x + size, y + size);
      }
      else{
         do Output.moveCursor(10,25);
         do Output.printString("Game Over");
         do Sys.halt();
      }
      return;
   }

   method void move(){
      if(direction = 1){
         do moveUp();
      }   
      if(direction = 2){
         do moveDown();
      }
      if(direction = 3){
         do moveLeft();
      }
      if(direction = 4){
         do moveRight();
      }
      return;   
   }
   method int getSquareX(){
      return x;
   }
   method int getSquareY(){
      return y;
   }



}
