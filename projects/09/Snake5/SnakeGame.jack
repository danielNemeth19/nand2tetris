// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/09/Square/SquareGame.jack

/**
 * Implements the Square Dance game.
 * This simple game allows the user to move a black square around
 * the screen, and change the square's size during the movement.
 * When the game starts, a square of 30 by 30 pixels is shown at the
 * top-left corner of the screen. The user controls the square as follows.
 * The 4 arrow keys are used to move the square up, down, left, and right.
 * The 'z' and 'x' keys are used, respectively, to decrement and increment
 * the square's size. The 'q' key is used to quit the game.
 */

class SnakeGame {
   field Snake snake;
   field int newDirection; 			// the square's current direction: 
			                        // 0=none, 1=up, 2=down, 3=left, 4=right
   field int score;
   field boolean scoreUp;
   field int foodXpos;
   field int foodYpos;
   field Food food;
   
   /** Constructs a new Square Game. */
   constructor SnakeGame new(int Aseed) {
      let snake = Snake.new(4,Aseed);
      let newDirection = 4;  		// initial state is no movement
   


      // *******print line and game score*********** 
      do Screen.drawLine(0,240,511,240);
      do Output.moveCursor(22,1);
      do Output.printString("Game Score : 0");
      // **********************************************
      return this;
   }

   /** Disposes this game. */
   method void dispose() {
      do square.dispose();
      do Memory.deAlloc(this);
      return;
   }


   /** Runs the game: handles the user's inputs and moves the square accordingly */
   method void run() {
      var char key;  // the key currently pressed by the user
      var boolean exit;
      let exit = false;

      while (~exit) {
         // waits for a key to be pressed
         while (key = 0) {
            let key = Keyboard.keyPressed();
            do snake.snakeMove();
         }
         
         // get pressed direction 
         do getNewDirection(key);
         // change snake direction
         do turnSnakeDirection();     

         // waits for the key to be released
         while (~(key = 0)) {
            let key = Keyboard.keyPressed();
            do snake.snakeMove();
         }
         
     } // while
     return;
   }


   // get pressed newDirection 
   method void getNewDirection(char Akey){
      var char key;
      let key = Akey;
      if (key = 131) { let newDirection = 1; }   // up arrow
      if (key = 133) { let newDirection = 2; }   // down arrow
      if (key = 130) { let newDirection = 3; }   // left arrow
      if (key = 132) { let newDirection = 4; }   // right arrow
      return;      
   }
   
   //if newDirection is possible turn snakeDirection 
   method void turnSnakeDirection(){
      if ((snake.getDirection() + newDirection = 7)| (snake.getDirection()+newDirection=3)){
         return;
      }
      else{
         do snake.turnDirection(newDirection);
         return;
      }
   }   

}
