// Bootstrap code
@256
D=A
@SP
M=D
// call Sys.init 0
@retAddrLabel1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
@5
D=D-A
@0
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(retAddrLabel1)
// function SnakeGame.new 0
(SnakeGame.new)
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Memory.alloc 1
@retAddrLabel4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.alloc
0;JMP
(retAddrLabel4)
// pop pointer 0
@SP
A=M-1
D=M
M=0
@13
M=D
@THIS
M=D
@SP
M=M-1
// push constant 128
@128
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 256
@256
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Snake.new 2
@retAddrLabel8
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Snake.new
0;JMP
(retAddrLabel8)
// pop this 0
@SP
A=M-1
D=M
M=0
@13
M=D
@THIS
D=M
@0
D=D+A
@14
M=D
@13
D=M
@14
A=M
M=D
@SP
M=M-1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop this 1
@SP
A=M-1
D=M
M=0
@13
M=D
@THIS
D=M
@1
D=D+A
@14
M=D
@13
D=M
@14
A=M
M=D
@SP
M=M-1
// push pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R15
M=D
@5
D=D-A
A=D
D=M
@retAddr
M=D
@SP
A=M-1
D=M
M=0
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R15
D=M
A=D-1
D=M
@THAT
M=D
@R15
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@R15
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@R15
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@retAddr
A=M
0;JMP
// function SnakeGame.dispose 0
(SnakeGame.dispose)
// push argument 0
@ARG
D=M
@0
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop pointer 0
@SP
A=M-1
D=M
M=0
@13
M=D
@THIS
M=D
@SP
M=M-1
// push this 0
@THIS
D=M
@0
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Snake.dispose 1
@retAddrLabel18
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Snake.dispose
0;JMP
(retAddrLabel18)
// pop temp 0
@SP
A=M-1
D=M
M=0
@13
M=D
@5
D=A
@14
M=D
@13
D=M
@14
A=M
M=D
@SP
M=M-1
// push pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Memory.deAlloc 1
@retAddrLabel21
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.deAlloc
0;JMP
(retAddrLabel21)
// pop temp 0
@SP
A=M-1
D=M
M=0
@13
M=D
@5
D=A
@14
M=D
@13
D=M
@14
A=M
M=D
@SP
M=M-1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R15
M=D
@5
D=D-A
A=D
D=M
@retAddr
M=D
@SP
A=M-1
D=M
M=0
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R15
D=M
A=D-1
D=M
@THAT
M=D
@R15
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@R15
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@R15
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@retAddr
A=M
0;JMP
// function SnakeGame.moveSnake 0
(SnakeGame.moveSnake)
// push argument 0
@ARG
D=M
@0
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop pointer 0
@SP
A=M-1
D=M
M=0
@13
M=D
@THIS
M=D
@SP
M=M-1
// push this 1
@THIS
D=M
@1
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
A=M-1
D=M
A=A-1
D=D-M
@Equal28
D;JEQ
@Nequal28
D;JNE
(Equal28)
@SP
A=M-1
M=0
A=A-1
M=D-1
@EndEq28
0;JMP
(Nequal28)
@SP
A=M-1
M=0
A=A-1
M=0
(EndEq28)
@SP
M=M-1
// if-goto IF_TRUE0
@SP
D=M-1
M=D
A=M
D=M
M=0
@IF_TRUE0
D;JNE
// goto IF_FALSE0
@IF_FALSE0
0;JMP
// label IF_TRUE0
(IF_TRUE0)
// push this 0
@THIS
D=M
@0
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Snake.moveUp 1
@retAddrLabel35
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Snake.moveUp
0;JMP
(retAddrLabel35)
// pop temp 0
@SP
A=M-1
D=M
M=0
@13
M=D
@5
D=A
@14
M=D
@13
D=M
@14
A=M
M=D
@SP
M=M-1
// label IF_FALSE0
(IF_FALSE0)
// push this 1
@THIS
D=M
@1
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
A=M-1
D=M
A=A-1
D=D-M
@Equal38
D;JEQ
@Nequal38
D;JNE
(Equal38)
@SP
A=M-1
M=0
A=A-1
M=D-1
@EndEq38
0;JMP
(Nequal38)
@SP
A=M-1
M=0
A=A-1
M=0
(EndEq38)
@SP
M=M-1
// if-goto IF_TRUE1
@SP
D=M-1
M=D
A=M
D=M
M=0
@IF_TRUE1
D;JNE
// goto IF_FALSE1
@IF_FALSE1
0;JMP
// label IF_TRUE1
(IF_TRUE1)
// push this 0
@THIS
D=M
@0
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Snake.moveDown 1
@retAddrLabel45
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Snake.moveDown
0;JMP
(retAddrLabel45)
// pop temp 0
@SP
A=M-1
D=M
M=0
@13
M=D
@5
D=A
@14
M=D
@13
D=M
@14
A=M
M=D
@SP
M=M-1
// label IF_FALSE1
(IF_FALSE1)
// push this 1
@THIS
D=M
@1
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
A=M-1
D=M
A=A-1
D=D-M
@Equal48
D;JEQ
@Nequal48
D;JNE
(Equal48)
@SP
A=M-1
M=0
A=A-1
M=D-1
@EndEq48
0;JMP
(Nequal48)
@SP
A=M-1
M=0
A=A-1
M=0
(EndEq48)
@SP
M=M-1
// if-goto IF_TRUE2
@SP
D=M-1
M=D
A=M
D=M
M=0
@IF_TRUE2
D;JNE
// goto IF_FALSE2
@IF_FALSE2
0;JMP
// label IF_TRUE2
(IF_TRUE2)
// push this 0
@THIS
D=M
@0
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Snake.moveLeft 1
@retAddrLabel55
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Snake.moveLeft
0;JMP
(retAddrLabel55)
// pop temp 0
@SP
A=M-1
D=M
M=0
@13
M=D
@5
D=A
@14
M=D
@13
D=M
@14
A=M
M=D
@SP
M=M-1
// label IF_FALSE2
(IF_FALSE2)
// push this 1
@THIS
D=M
@1
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
A=M-1
D=M
A=A-1
D=D-M
@Equal58
D;JEQ
@Nequal58
D;JNE
(Equal58)
@SP
A=M-1
M=0
A=A-1
M=D-1
@EndEq58
0;JMP
(Nequal58)
@SP
A=M-1
M=0
A=A-1
M=0
(EndEq58)
@SP
M=M-1
// if-goto IF_TRUE3
@SP
D=M-1
M=D
A=M
D=M
M=0
@IF_TRUE3
D;JNE
// goto IF_FALSE3
@IF_FALSE3
0;JMP
// label IF_TRUE3
(IF_TRUE3)
// push this 0
@THIS
D=M
@0
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Snake.moveRight 1
@retAddrLabel65
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Snake.moveRight
0;JMP
(retAddrLabel65)
// pop temp 0
@SP
A=M-1
D=M
M=0
@13
M=D
@5
D=A
@14
M=D
@13
D=M
@14
A=M
M=D
@SP
M=M-1
// label IF_FALSE3
(IF_FALSE3)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R15
M=D
@5
D=D-A
A=D
D=M
@retAddr
M=D
@SP
A=M-1
D=M
M=0
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R15
D=M
A=D-1
D=M
@THAT
M=D
@R15
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@R15
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@R15
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@retAddr
A=M
0;JMP
// function SnakeGame.run 2
(SnakeGame.run)
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push argument 0
@ARG
D=M
@0
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop pointer 0
@SP
A=M-1
D=M
M=0
@13
M=D
@THIS
M=D
@SP
M=M-1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop local 1
@SP
A=M-1
D=M
M=0
@13
M=D
@LCL
D=M
@1
D=D+A
@14
M=D
@13
D=M
@14
A=M
M=D
@SP
M=M-1
// label WHILE_EXP0
(WHILE_EXP0)
// push local 1
@LCL
D=M
@1
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
D=M-1
M=D
A=M
D=M
M=0
@WHILE_END0
D;JNE
// label WHILE_EXP1
(WHILE_EXP1)
// push local 0
@LCL
D=M
@0
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
A=M-1
D=M
A=A-1
D=D-M
@Equal81
D;JEQ
@Nequal81
D;JNE
(Equal81)
@SP
A=M-1
M=0
A=A-1
M=D-1
@EndEq81
0;JMP
(Nequal81)
@SP
A=M-1
M=0
A=A-1
M=0
(EndEq81)
@SP
M=M-1
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END1
@SP
D=M-1
M=D
A=M
D=M
M=0
@WHILE_END1
D;JNE
// call Keyboard.keyPressed 0
@retAddrLabel86
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
@5
D=D-A
@0
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Keyboard.keyPressed
0;JMP
(retAddrLabel86)
// pop local 0
@SP
A=M-1
D=M
M=0
@13
M=D
@LCL
D=M
@0
D=D+A
@14
M=D
@13
D=M
@14
A=M
M=D
@SP
M=M-1
// push pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// call SnakeGame.moveSnake 1
@retAddrLabel89
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@SnakeGame.moveSnake
0;JMP
(retAddrLabel89)
// pop temp 0
@SP
A=M-1
D=M
M=0
@13
M=D
@5
D=A
@14
M=D
@13
D=M
@14
A=M
M=D
@SP
M=M-1
// goto WHILE_EXP1
@WHILE_EXP1
0;JMP
// label WHILE_END1
(WHILE_END1)
// push local 0
@LCL
D=M
@0
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 81
@81
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
A=M-1
D=M
A=A-1
D=D-M
@Equal93
D;JEQ
@Nequal93
D;JNE
(Equal93)
@SP
A=M-1
M=0
A=A-1
M=D-1
@EndEq93
0;JMP
(Nequal93)
@SP
A=M-1
M=0
A=A-1
M=0
(EndEq93)
@SP
M=M-1
// if-goto IF_TRUE0
@SP
D=M-1
M=D
A=M
D=M
M=0
@IF_TRUE0
D;JNE
// goto IF_FALSE0
@IF_FALSE0
0;JMP
// label IF_TRUE0
(IF_TRUE0)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// pop local 1
@SP
A=M-1
D=M
M=0
@13
M=D
@LCL
D=M
@1
D=D+A
@14
M=D
@13
D=M
@14
A=M
M=D
@SP
M=M-1
// label IF_FALSE0
(IF_FALSE0)
// push local 0
@LCL
D=M
@0
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 131
@131
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
A=M-1
D=M
A=A-1
D=D-M
@Equal103
D;JEQ
@Nequal103
D;JNE
(Equal103)
@SP
A=M-1
M=0
A=A-1
M=D-1
@EndEq103
0;JMP
(Nequal103)
@SP
A=M-1
M=0
A=A-1
M=0
(EndEq103)
@SP
M=M-1
// if-goto IF_TRUE1
@SP
D=M-1
M=D
A=M
D=M
M=0
@IF_TRUE1
D;JNE
// goto IF_FALSE1
@IF_FALSE1
0;JMP
// label IF_TRUE1
(IF_TRUE1)
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop this 1
@SP
A=M-1
D=M
M=0
@13
M=D
@THIS
D=M
@1
D=D+A
@14
M=D
@13
D=M
@14
A=M
M=D
@SP
M=M-1
// label IF_FALSE1
(IF_FALSE1)
// push local 0
@LCL
D=M
@0
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 133
@133
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
A=M-1
D=M
A=A-1
D=D-M
@Equal112
D;JEQ
@Nequal112
D;JNE
(Equal112)
@SP
A=M-1
M=0
A=A-1
M=D-1
@EndEq112
0;JMP
(Nequal112)
@SP
A=M-1
M=0
A=A-1
M=0
(EndEq112)
@SP
M=M-1
// if-goto IF_TRUE2
@SP
D=M-1
M=D
A=M
D=M
M=0
@IF_TRUE2
D;JNE
// goto IF_FALSE2
@IF_FALSE2
0;JMP
// label IF_TRUE2
(IF_TRUE2)
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop this 1
@SP
A=M-1
D=M
M=0
@13
M=D
@THIS
D=M
@1
D=D+A
@14
M=D
@13
D=M
@14
A=M
M=D
@SP
M=M-1
// label IF_FALSE2
(IF_FALSE2)
// push local 0
@LCL
D=M
@0
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 130
@130
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
A=M-1
D=M
A=A-1
D=D-M
@Equal121
D;JEQ
@Nequal121
D;JNE
(Equal121)
@SP
A=M-1
M=0
A=A-1
M=D-1
@EndEq121
0;JMP
(Nequal121)
@SP
A=M-1
M=0
A=A-1
M=0
(EndEq121)
@SP
M=M-1
// if-goto IF_TRUE3
@SP
D=M-1
M=D
A=M
D=M
M=0
@IF_TRUE3
D;JNE
// goto IF_FALSE3
@IF_FALSE3
0;JMP
// label IF_TRUE3
(IF_TRUE3)
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop this 1
@SP
A=M-1
D=M
M=0
@13
M=D
@THIS
D=M
@1
D=D+A
@14
M=D
@13
D=M
@14
A=M
M=D
@SP
M=M-1
// label IF_FALSE3
(IF_FALSE3)
// push local 0
@LCL
D=M
@0
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 132
@132
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
A=M-1
D=M
A=A-1
D=D-M
@Equal130
D;JEQ
@Nequal130
D;JNE
(Equal130)
@SP
A=M-1
M=0
A=A-1
M=D-1
@EndEq130
0;JMP
(Nequal130)
@SP
A=M-1
M=0
A=A-1
M=0
(EndEq130)
@SP
M=M-1
// if-goto IF_TRUE4
@SP
D=M-1
M=D
A=M
D=M
M=0
@IF_TRUE4
D;JNE
// goto IF_FALSE4
@IF_FALSE4
0;JMP
// label IF_TRUE4
(IF_TRUE4)
// push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop this 1
@SP
A=M-1
D=M
M=0
@13
M=D
@THIS
D=M
@1
D=D+A
@14
M=D
@13
D=M
@14
A=M
M=D
@SP
M=M-1
// label IF_FALSE4
(IF_FALSE4)
// label WHILE_EXP2
(WHILE_EXP2)
// push local 0
@LCL
D=M
@0
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
A=M-1
D=M
A=A-1
D=D-M
@Equal140
D;JEQ
@Nequal140
D;JNE
(Equal140)
@SP
A=M-1
M=0
A=A-1
M=D-1
@EndEq140
0;JMP
(Nequal140)
@SP
A=M-1
M=0
A=A-1
M=0
(EndEq140)
@SP
M=M-1
// not
@SP
A=M-1
M=!M
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END2
@SP
D=M-1
M=D
A=M
D=M
M=0
@WHILE_END2
D;JNE
// call Keyboard.KeyPressed 0
@retAddrLabel146
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
@5
D=D-A
@0
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Keyboard.KeyPressed
0;JMP
(retAddrLabel146)
// pop local 0
@SP
A=M-1
D=M
M=0
@13
M=D
@LCL
D=M
@0
D=D+A
@14
M=D
@13
D=M
@14
A=M
M=D
@SP
M=M-1
// push pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// call SnakeGame.moveSnake 1
@retAddrLabel149
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@SnakeGame.moveSnake
0;JMP
(retAddrLabel149)
// pop temp 0
@SP
A=M-1
D=M
M=0
@13
M=D
@5
D=A
@14
M=D
@13
D=M
@14
A=M
M=D
@SP
M=M-1
// goto WHILE_EXP2
@WHILE_EXP2
0;JMP
// label WHILE_END2
(WHILE_END2)
// goto WHILE_EXP0
@WHILE_EXP0
0;JMP
// label WHILE_END0
(WHILE_END0)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R15
M=D
@5
D=D-A
A=D
D=M
@retAddr
M=D
@SP
A=M-1
D=M
M=0
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R15
D=M
A=D-1
D=M
@THAT
M=D
@R15
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@R15
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@R15
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@retAddr
A=M
0;JMP
// function Main.main 1
(Main.main)
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call SnakeGame.new 0
@retAddrLabel3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
@5
D=D-A
@0
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@SnakeGame.new
0;JMP
(retAddrLabel3)
// pop local 0
@SP
A=M-1
D=M
M=0
@13
M=D
@LCL
D=M
@0
D=D+A
@14
M=D
@13
D=M
@14
A=M
M=D
@SP
M=M-1
// push local 0
@LCL
D=M
@0
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// call SnakeGame.run 1
@retAddrLabel6
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@SnakeGame.run
0;JMP
(retAddrLabel6)
// pop temp 0
@SP
A=M-1
D=M
M=0
@13
M=D
@5
D=A
@14
M=D
@13
D=M
@14
A=M
M=D
@SP
M=M-1
// push local 0
@LCL
D=M
@0
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// call SnakeGame.dispose 1
@retAddrLabel9
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@SnakeGame.dispose
0;JMP
(retAddrLabel9)
// pop temp 0
@SP
A=M-1
D=M
M=0
@13
M=D
@5
D=A
@14
M=D
@13
D=M
@14
A=M
M=D
@SP
M=M-1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R15
M=D
@5
D=D-A
A=D
D=M
@retAddr
M=D
@SP
A=M-1
D=M
M=0
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R15
D=M
A=D-1
D=M
@THAT
M=D
@R15
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@R15
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@R15
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@retAddr
A=M
0;JMP
// function Snake.new 0
(Snake.new)
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Memory.alloc 1
@retAddrLabel4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.alloc
0;JMP
(retAddrLabel4)
// pop pointer 0
@SP
A=M-1
D=M
M=0
@13
M=D
@THIS
M=D
@SP
M=M-1
// push argument 0
@ARG
D=M
@0
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop this 0
@SP
A=M-1
D=M
M=0
@13
M=D
@THIS
D=M
@0
D=D+A
@14
M=D
@13
D=M
@14
A=M
M=D
@SP
M=M-1
// push argument 1
@ARG
D=M
@1
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop this 1
@SP
A=M-1
D=M
M=0
@13
M=D
@THIS
D=M
@1
D=D+A
@14
M=D
@13
D=M
@14
A=M
M=D
@SP
M=M-1
// push pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Snake.draw 1
@retAddrLabel11
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Snake.draw
0;JMP
(retAddrLabel11)
// pop temp 0
@SP
A=M-1
D=M
M=0
@13
M=D
@5
D=A
@14
M=D
@13
D=M
@14
A=M
M=D
@SP
M=M-1
// push pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R15
M=D
@5
D=D-A
A=D
D=M
@retAddr
M=D
@SP
A=M-1
D=M
M=0
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R15
D=M
A=D-1
D=M
@THAT
M=D
@R15
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@R15
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@R15
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@retAddr
A=M
0;JMP
// function Snake.dispose 0
(Snake.dispose)
// push argument 0
@ARG
D=M
@0
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop pointer 0
@SP
A=M-1
D=M
M=0
@13
M=D
@THIS
M=D
@SP
M=M-1
// push pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Memory.deAlloc 1
@retAddrLabel19
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.deAlloc
0;JMP
(retAddrLabel19)
// pop temp 0
@SP
A=M-1
D=M
M=0
@13
M=D
@5
D=A
@14
M=D
@13
D=M
@14
A=M
M=D
@SP
M=M-1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R15
M=D
@5
D=D-A
A=D
D=M
@retAddr
M=D
@SP
A=M-1
D=M
M=0
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R15
D=M
A=D-1
D=M
@THAT
M=D
@R15
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@R15
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@R15
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@retAddr
A=M
0;JMP
// function Snake.draw 0
(Snake.draw)
// push argument 0
@ARG
D=M
@0
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop pointer 0
@SP
A=M-1
D=M
M=0
@13
M=D
@THIS
M=D
@SP
M=M-1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// call Screen.setColor 1
@retAddrLabel28
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.setColor
0;JMP
(retAddrLabel28)
// pop temp 0
@SP
A=M-1
D=M
M=0
@13
M=D
@5
D=A
@14
M=D
@13
D=M
@14
A=M
M=D
@SP
M=M-1
// push this 0
@THIS
D=M
@0
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 1
@THIS
D=M
@1
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Screen.drawPixel 2
@retAddrLabel32
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawPixel
0;JMP
(retAddrLabel32)
// pop temp 0
@SP
A=M-1
D=M
M=0
@13
M=D
@5
D=A
@14
M=D
@13
D=M
@14
A=M
M=D
@SP
M=M-1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R15
M=D
@5
D=D-A
A=D
D=M
@retAddr
M=D
@SP
A=M-1
D=M
M=0
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R15
D=M
A=D-1
D=M
@THAT
M=D
@R15
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@R15
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@R15
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@retAddr
A=M
0;JMP
// function Snake.erase 0
(Snake.erase)
// push argument 0
@ARG
D=M
@0
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop pointer 0
@SP
A=M-1
D=M
M=0
@13
M=D
@THIS
M=D
@SP
M=M-1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Screen.setColor 1
@retAddrLabel40
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.setColor
0;JMP
(retAddrLabel40)
// pop temp 0
@SP
A=M-1
D=M
M=0
@13
M=D
@5
D=A
@14
M=D
@13
D=M
@14
A=M
M=D
@SP
M=M-1
// push this 0
@THIS
D=M
@0
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 1
@THIS
D=M
@1
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Screen.drawPixel 2
@retAddrLabel44
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawPixel
0;JMP
(retAddrLabel44)
// pop temp 0
@SP
A=M-1
D=M
M=0
@13
M=D
@5
D=A
@14
M=D
@13
D=M
@14
A=M
M=D
@SP
M=M-1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R15
M=D
@5
D=D-A
A=D
D=M
@retAddr
M=D
@SP
A=M-1
D=M
M=0
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R15
D=M
A=D-1
D=M
@THAT
M=D
@R15
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@R15
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@R15
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@retAddr
A=M
0;JMP
// function Snake.moveUp 0
(Snake.moveUp)
// push argument 0
@ARG
D=M
@0
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop pointer 0
@SP
A=M-1
D=M
M=0
@13
M=D
@THIS
M=D
@SP
M=M-1
// push this 1
@THIS
D=M
@1
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
A=M-1
A=A-1
D=M
@13
M=D
@SP
A=M-1
D=M
A=A-1
D=D-M
@Larger51

D;JLT
@Smaller51
D;JGE
(Larger51)
@13
D=M
M=M+1
D=D-M
@SP
A=M-1
M=0
A=A-1
M=D
@EndGt51
0;JMP
(Smaller51)
@SP
A=M-1
M=0
A=A-1
M=0
(EndGt51)
@SP
M=M-1
// if-goto IF_TRUE0
@SP
D=M-1
M=D
A=M
D=M
M=0
@IF_TRUE0
D;JNE
// goto IF_FALSE0
@IF_FALSE0
0;JMP
// label IF_TRUE0
(IF_TRUE0)
// push pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Snake.erase 1
@retAddrLabel58
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Snake.erase
0;JMP
(retAddrLabel58)
// pop temp 0
@SP
A=M-1
D=M
M=0
@13
M=D
@5
D=A
@14
M=D
@13
D=M
@14
A=M
M=D
@SP
M=M-1
// push this 1
@THIS
D=M
@1
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
A=M-1
D=M
M=0
A=A-1
M=M-D
@SP
M=M-1
// pop this 1
@SP
A=M-1
D=M
M=0
@13
M=D
@THIS
D=M
@1
D=D+A
@14
M=D
@13
D=M
@14
A=M
M=D
@SP
M=M-1
// push pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Snake.draw 1
@retAddrLabel65
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Snake.draw
0;JMP
(retAddrLabel65)
// pop temp 0
@SP
A=M-1
D=M
M=0
@13
M=D
@5
D=A
@14
M=D
@13
D=M
@14
A=M
M=D
@SP
M=M-1
// goto IF_END0
@IF_END0
0;JMP
// label IF_FALSE0
(IF_FALSE0)
// push pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Snake.erase 1
@retAddrLabel70
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Snake.erase
0;JMP
(retAddrLabel70)
// pop temp 0
@SP
A=M-1
D=M
M=0
@13
M=D
@5
D=A
@14
M=D
@13
D=M
@14
A=M
M=D
@SP
M=M-1
// push constant 512
@512
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop this 1
@SP
A=M-1
D=M
M=0
@13
M=D
@THIS
D=M
@1
D=D+A
@14
M=D
@13
D=M
@14
A=M
M=D
@SP
M=M-1
// push pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Snake.draw 1
@retAddrLabel75
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Snake.draw
0;JMP
(retAddrLabel75)
// pop temp 0
@SP
A=M-1
D=M
M=0
@13
M=D
@5
D=A
@14
M=D
@13
D=M
@14
A=M
M=D
@SP
M=M-1
// label IF_END0
(IF_END0)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R15
M=D
@5
D=D-A
A=D
D=M
@retAddr
M=D
@SP
A=M-1
D=M
M=0
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R15
D=M
A=D-1
D=M
@THAT
M=D
@R15
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@R15
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@R15
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@retAddr
A=M
0;JMP
// function Snake.moveDown 0
(Snake.moveDown)
// push argument 0
@ARG
D=M
@0
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop pointer 0
@SP
A=M-1
D=M
M=0
@13
M=D
@THIS
M=D
@SP
M=M-1
// push this 1
@THIS
D=M
@1
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 512
@512
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
A=M-1
A=A-1
D=M
@13
M=D
@SP
A=M-1
D=M
A=A-1
D=D-M
@Smaller83
D;JGT
@Larger83
D;JLE
(Smaller83)
@13
D=M
M=M+1
D=D-M
@SP
A=M-1
M=0
A=A-1
M=D
@EndLt83
0;JMP
(Larger83)
@SP
A=M-1
M=0
A=A-1
M=0
(EndLt83)
@SP
M=M-1
// if-goto IF_TRUE0
@SP
D=M-1
M=D
A=M
D=M
M=0
@IF_TRUE0
D;JNE
// goto IF_FALSE0
@IF_FALSE0
0;JMP
// label IF_TRUE0
(IF_TRUE0)
// push pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Snake.erase 1
@retAddrLabel90
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Snake.erase
0;JMP
(retAddrLabel90)
// pop temp 0
@SP
A=M-1
D=M
M=0
@13
M=D
@5
D=A
@14
M=D
@13
D=M
@14
A=M
M=D
@SP
M=M-1
// push this 1
@THIS
D=M
@1
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
M=0
A=A-1
M=D+M
@SP
M=M-1
// pop this 1
@SP
A=M-1
D=M
M=0
@13
M=D
@THIS
D=M
@1
D=D+A
@14
M=D
@13
D=M
@14
A=M
M=D
@SP
M=M-1
// push pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Snake.draw 1
@retAddrLabel97
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Snake.draw
0;JMP
(retAddrLabel97)
// pop temp 0
@SP
A=M-1
D=M
M=0
@13
M=D
@5
D=A
@14
M=D
@13
D=M
@14
A=M
M=D
@SP
M=M-1
// goto IF_END0
@IF_END0
0;JMP
// label IF_FALSE0
(IF_FALSE0)
// push pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Snake.erase 1
@retAddrLabel102
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Snake.erase
0;JMP
(retAddrLabel102)
// pop temp 0
@SP
A=M-1
D=M
M=0
@13
M=D
@5
D=A
@14
M=D
@13
D=M
@14
A=M
M=D
@SP
M=M-1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop this 1
@SP
A=M-1
D=M
M=0
@13
M=D
@THIS
D=M
@1
D=D+A
@14
M=D
@13
D=M
@14
A=M
M=D
@SP
M=M-1
// push pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Snake.draw 1
@retAddrLabel107
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Snake.draw
0;JMP
(retAddrLabel107)
// pop temp 0
@SP
A=M-1
D=M
M=0
@13
M=D
@5
D=A
@14
M=D
@13
D=M
@14
A=M
M=D
@SP
M=M-1
// label IF_END0
(IF_END0)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R15
M=D
@5
D=D-A
A=D
D=M
@retAddr
M=D
@SP
A=M-1
D=M
M=0
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R15
D=M
A=D-1
D=M
@THAT
M=D
@R15
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@R15
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@R15
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@retAddr
A=M
0;JMP
// function Snake.moveRight 0
(Snake.moveRight)
// push argument 0
@ARG
D=M
@0
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop pointer 0
@SP
A=M-1
D=M
M=0
@13
M=D
@THIS
M=D
@SP
M=M-1
// push this 0
@THIS
D=M
@0
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 256
@256
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
A=M-1
A=A-1
D=M
@13
M=D
@SP
A=M-1
D=M
A=A-1
D=D-M
@Smaller115
D;JGT
@Larger115
D;JLE
(Smaller115)
@13
D=M
M=M+1
D=D-M
@SP
A=M-1
M=0
A=A-1
M=D
@EndLt115
0;JMP
(Larger115)
@SP
A=M-1
M=0
A=A-1
M=0
(EndLt115)
@SP
M=M-1
// if-goto IF_TRUE0
@SP
D=M-1
M=D
A=M
D=M
M=0
@IF_TRUE0
D;JNE
// goto IF_FALSE0
@IF_FALSE0
0;JMP
// label IF_TRUE0
(IF_TRUE0)
// push pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Snake.erase 1
@retAddrLabel122
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Snake.erase
0;JMP
(retAddrLabel122)
// pop temp 0
@SP
A=M-1
D=M
M=0
@13
M=D
@5
D=A
@14
M=D
@13
D=M
@14
A=M
M=D
@SP
M=M-1
// push this 0
@THIS
D=M
@0
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
M=0
A=A-1
M=D+M
@SP
M=M-1
// pop this 0
@SP
A=M-1
D=M
M=0
@13
M=D
@THIS
D=M
@0
D=D+A
@14
M=D
@13
D=M
@14
A=M
M=D
@SP
M=M-1
// push pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Snake.draw 1
@retAddrLabel129
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Snake.draw
0;JMP
(retAddrLabel129)
// pop temp 0
@SP
A=M-1
D=M
M=0
@13
M=D
@5
D=A
@14
M=D
@13
D=M
@14
A=M
M=D
@SP
M=M-1
// goto IF_END0
@IF_END0
0;JMP
// label IF_FALSE0
(IF_FALSE0)
// push pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Snake.erase 1
@retAddrLabel134
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Snake.erase
0;JMP
(retAddrLabel134)
// pop temp 0
@SP
A=M-1
D=M
M=0
@13
M=D
@5
D=A
@14
M=D
@13
D=M
@14
A=M
M=D
@SP
M=M-1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop this 0
@SP
A=M-1
D=M
M=0
@13
M=D
@THIS
D=M
@0
D=D+A
@14
M=D
@13
D=M
@14
A=M
M=D
@SP
M=M-1
// push pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Snake.draw 1
@retAddrLabel139
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Snake.draw
0;JMP
(retAddrLabel139)
// pop temp 0
@SP
A=M-1
D=M
M=0
@13
M=D
@5
D=A
@14
M=D
@13
D=M
@14
A=M
M=D
@SP
M=M-1
// label IF_END0
(IF_END0)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R15
M=D
@5
D=D-A
A=D
D=M
@retAddr
M=D
@SP
A=M-1
D=M
M=0
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R15
D=M
A=D-1
D=M
@THAT
M=D
@R15
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@R15
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@R15
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@retAddr
A=M
0;JMP
// function Snake.moveLeft 0
(Snake.moveLeft)
// push argument 0
@ARG
D=M
@0
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop pointer 0
@SP
A=M-1
D=M
M=0
@13
M=D
@THIS
M=D
@SP
M=M-1
// push this 0
@THIS
D=M
@0
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
A=M-1
A=A-1
D=M
@13
M=D
@SP
A=M-1
D=M
A=A-1
D=D-M
@Larger147

D;JLT
@Smaller147
D;JGE
(Larger147)
@13
D=M
M=M+1
D=D-M
@SP
A=M-1
M=0
A=A-1
M=D
@EndGt147
0;JMP
(Smaller147)
@SP
A=M-1
M=0
A=A-1
M=0
(EndGt147)
@SP
M=M-1
// if-goto IF_TRUE0
@SP
D=M-1
M=D
A=M
D=M
M=0
@IF_TRUE0
D;JNE
// goto IF_FALSE0
@IF_FALSE0
0;JMP
// label IF_TRUE0
(IF_TRUE0)
// push pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Snake.erase 1
@retAddrLabel154
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Snake.erase
0;JMP
(retAddrLabel154)
// pop temp 0
@SP
A=M-1
D=M
M=0
@13
M=D
@5
D=A
@14
M=D
@13
D=M
@14
A=M
M=D
@SP
M=M-1
// push this 0
@THIS
D=M
@0
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
A=M-1
D=M
M=0
A=A-1
M=M-D
@SP
M=M-1
// pop this 0
@SP
A=M-1
D=M
M=0
@13
M=D
@THIS
D=M
@0
D=D+A
@14
M=D
@13
D=M
@14
A=M
M=D
@SP
M=M-1
// push pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Snake.draw 1
@retAddrLabel161
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Snake.draw
0;JMP
(retAddrLabel161)
// pop temp 0
@SP
A=M-1
D=M
M=0
@13
M=D
@5
D=A
@14
M=D
@13
D=M
@14
A=M
M=D
@SP
M=M-1
// goto IF_END0
@IF_END0
0;JMP
// label IF_FALSE0
(IF_FALSE0)
// push pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Snake.erase 1
@retAddrLabel166
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Snake.erase
0;JMP
(retAddrLabel166)
// pop temp 0
@SP
A=M-1
D=M
M=0
@13
M=D
@5
D=A
@14
M=D
@13
D=M
@14
A=M
M=D
@SP
M=M-1
// push constant 256
@256
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop this 0
@SP
A=M-1
D=M
M=0
@13
M=D
@THIS
D=M
@0
D=D+A
@14
M=D
@13
D=M
@14
A=M
M=D
@SP
M=M-1
// push pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Snake.draw 1
@retAddrLabel171
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Snake.draw
0;JMP
(retAddrLabel171)
// pop temp 0
@SP
A=M-1
D=M
M=0
@13
M=D
@5
D=A
@14
M=D
@13
D=M
@14
A=M
M=D
@SP
M=M-1
// label IF_END0
(IF_END0)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R15
M=D
@5
D=D-A
A=D
D=M
@retAddr
M=D
@SP
A=M-1
D=M
M=0
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R15
D=M
A=D-1
D=M
@THAT
M=D
@R15
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@R15
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@R15
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@retAddr
A=M
0;JMP