// This file is part of Project9

/** Implements a target course path. */
class Course {

  field int x;
  field int y; 
  field int courseLength;
  field int gidx ;
  field Array guidepostX ; 
  field Array guidepostY ; 
  field int lapN ;

  static int xmin ;
  static int xmax ;
  static int ymin ;
  static int ymax ;

  /** Constructs a new course */
  constructor Course new(int courseN) {
    var int len ;

    let gidx = 0;
    let courseLength = -1 ;
    let x = 255 ;
    let y = 127 ;
    let lapN = 0 ;

    let xmin = 42 ;
    let xmax = 511 - 42 ;
    let ymin = 42 ;
    let ymax = 255 - 42 ;

    if (courseN = 1) {
      let courseLength = Course.course_1_len() ;
      let guidepostX = Array.new(courseLength) ;
      let guidepostY = Array.new(courseLength) ;
      do Course.course_1(x, y, guidepostX, guidepostY, gidx) ;
      let x = guidepostX[courseLength-1] ;
      let y = guidepostY[courseLength-1] ;
    }
    if (courseN = 2) {
      let courseLength = Course.course_2_len() ;
      let guidepostX = Array.new(courseLength) ;
      let guidepostY = Array.new(courseLength) ;
      do Course.course_2(x, y, guidepostX, guidepostY, gidx) ;
      let x = guidepostX[courseLength-1] ;
      let y = guidepostY[courseLength-1] ;
    }
    if (courseN = 3) {
      let courseLength = Course.course_3_len() ;
      let guidepostX = Array.new(courseLength) ;
      let guidepostY = Array.new(courseLength) ;
      do Course.course_3(x, y, guidepostX, guidepostY, gidx) ;
      let x = guidepostX[courseLength-1] ;
      let y = guidepostY[courseLength-1] ;
    }
   

    return this ;
  }

  /** Disposes alloc'd items. */
  method void dispose() {
    do guidepostX.dispose() ;
    do guidepostY.dispose() ;

    do Memory.deAlloc(this) ;

    return;
  }

  /** Getters */
  method int getx() { return x ; }
  method int gety() { return y ; }
  method int getLapCount() { return lapN ; }

  /** move x, y to the next location. */
  method void nextLocation() {
    var int gx ;
    var int gy ;

    let gx = guidepostX[gidx] ;
    let gy = guidepostY[gidx] ;

    if ( ( x = gx ) & ( y = gy ) ) {
      let gidx = gidx + 1 ;
      if ( gidx = courseLength ) {
        let gidx = 0 ; 
        let lapN = lapN + 1 ;
      }
      let gx = guidepostX[gidx] ;
      let gy = guidepostY[gidx] ;
    }
    let x = Course.towards(x,gx) ;
    let y = Course.towards(y,gy) ;

    return ;
  }

  /** Course 1.  A straight line */
  function int course_1_len() { return 2 ; }
  function void course_1(int x0, int y0, Array gpx, Array gpy, int gidx) {

    let gpx[0] = xmax ; let gpy[0] = y0 ;
    let gpx[1] = xmin ; let gpy[1] = y0 ;

    return ;
  }

  /** Course 2.  A box */
  function int course_2_len() { return 4 ; }
  function void course_2(int x0, int y0, Array gpx, Array gpy, int gidx) {
    let gpx[0] = xmax ; let gpy[0] = ymax ;
    let gpx[1] = xmax ; let gpy[1] = ymin ;
    let gpx[2] = xmin ; let gpy[2] = ymin ;
    let gpx[3] = xmin ; let gpy[3] = ymax ;

    return ;
  }

  /** Course 3.  A figure 8*/
  function int course_3_len() { return 8 ; }
  function void course_3(int x0, int y0, Array gpx, Array gpy, int gidx) {
    let gpx[0] =  255 ; let gpy[0] = ymax ;
    let gpx[1] =  255 ; let gpy[1] = ymin ;
    let gpx[2] = xmax ; let gpy[2] = ymin ;
    let gpx[3] = xmax ; let gpy[3] = ymax ;
    let gpx[4] =  255 ; let gpy[4] = ymax ;
    let gpx[5] =  255 ; let gpy[5] = ymin ;
    let gpx[6] = xmin ; let gpy[6] = ymin ;
    let gpx[7] = xmin ; let gpy[7] = ymax ;

    return ;
  }

  /** Towards. take a coordinate in one dimension and 
   **    give updated coordinate one unit away, closer to goal
   */
  function int towards(int curr, int dest) {
      var int ret ;
      let ret = curr ;
      if ( curr < dest ) { 
        let ret  = curr + 1 ; 
      } 
      else { 
        if ( curr > dest) {
          let ret = curr - 1; 
        } 
      }
 
     return ret ;
  } 
}
