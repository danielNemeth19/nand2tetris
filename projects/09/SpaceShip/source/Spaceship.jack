
/** Implements a graphical spaceship. */
class Spaceship {

   field int x, y; // screen location of the spaceship's top-left corner
   field int size; // length of this square, in pixels
   field int memAddress;

   /** Constructs a new square with a given location and size. */
   constructor Spaceship new() {
 
      let x = 255;  // starting coordinates
      let y = 240;
      do draw();
      return this;
   }

   /** Disposes this spaceship. */
   method void dispose() {
      do Memory.deAlloc(this);
      return;
   }

    method int getX() {
      return x;
    }

    method int getY() {
      return y;
    }
 
    method void drawSpaceship() {
      var int currLocation;
      let currLocation = Math.multiply(32, y) + Math.divide(x, 16);
      let memAddress = 16384+currLocation;
      do Memory.poke(memAddress+0, 0);
      do Memory.poke(memAddress+32, 0);
      do Memory.poke(memAddress+64, 10260);
      do Memory.poke(memAddress+96, 4104);
      do Memory.poke(memAddress+128, 4104);
      do Memory.poke(memAddress+160, 4488);
      do Memory.poke(memAddress+192, 4488);
      do Memory.poke(memAddress+224, 5064);
      do Memory.poke(memAddress+256, 6120);
      do Memory.poke(memAddress+288, 16380);
      do Memory.poke(memAddress+320, 27306);
      do Memory.poke(memAddress+352, -1);
      do Memory.poke(memAddress+384, 32766);
      do Memory.poke(memAddress+416, 16380);
      do Memory.poke(memAddress+448, 3120);
      do Memory.poke(memAddress+480, 14364);
      return;
    }

   /** Draws the spaceship on the screen. */
   method void draw() {
      do drawSpaceship();
      return;
   }

   /** Erases the spaceship from the screen. */
   method void erase() {
      var int currLocation;
      let currLocation = Math.multiply(32, y) + Math.divide(x, 16);
      let memAddress = 16384+currLocation;
      do Memory.poke(memAddress+0, 0);
      do Memory.poke(memAddress+32, 0);
      do Memory.poke(memAddress+64, 0);
      do Memory.poke(memAddress+96,  0);
      do Memory.poke(memAddress+128, 0);
      do Memory.poke(memAddress+160, 0);
      do Memory.poke(memAddress+192, 0);
      do Memory.poke(memAddress+224, 0);
      do Memory.poke(memAddress+256, 0);
      do Memory.poke(memAddress+288, 0);
      do Memory.poke(memAddress+320, 0);
      do Memory.poke(memAddress+352, 0);
      do Memory.poke(memAddress+384, 0);
      do Memory.poke(memAddress+416, 0);
      do Memory.poke(memAddress+448, 0);
      do Memory.poke(memAddress+480, 0);
      return;
   }

      /** Moves the spaceship up by 2 rows. */
   method void moveUp() {
      if (y > 1) {
        do erase();
        let y= y-2;
        do drawSpaceship();
      }
      return;
   }

   /** Moves the spaceship down by 2 rows. */
   method void moveDown() {
      if ((y + 16) < 255) {
        do erase();
        let y = y+2;
        do drawSpaceship();
      }
      return;
   }

   /** Moves the spaceship left by 2 columns. */
   method void moveLeft() {
      if (x > 1) {
        do erase();
        let x = x-2;
        do drawSpaceship();
      }
      return;
   }

   /** Moves the spaceship right by 2 columns. */
   method void moveRight() {
      if ((x + 16) < 512) {
        do erase();
        let x = x+2;
        do drawSpaceship();
      }
      return;
   }
}
