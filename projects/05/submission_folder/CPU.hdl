// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    And(a=instruction[4], b=instruction[15], out=DRegControl);
    DRegister(in=ALUOutput, load=DRegControl, out=ALUFeed1);

    Mux16(a=instruction, b=ALUOutput, sel=instruction[15], out=ARegFeed);

    Not(in=instruction[15], out=isAInstruction);
    Or(a=isAInstruction, b=instruction[5], out=ARegControl);
    ARegister(in=ARegFeed, load=ARegControl, out=ARegOut, out[0..14]=addressM);
    Mux16(a=ARegOut, b=inM, sel=instruction[12], out=ALUFeed2);

    ALU(x=ALUFeed1, y=ALUFeed2, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7],
     no=instruction[6], out=outM, out=ALUOutput, zr=zout, ng=nout);
    And(a=instruction[3], b=instruction[15], out=writeM);
    Pos(a=zout, b=nout, out=pos);
    And(a=pos, b=instruction[0], out=jgt);
    And(a=zout, b=instruction[1], out=jeq);
    Or(a=zout, b=pos, out=jgecond1);
    And(a=instruction[0], b=instruction[1], out=jgecond2);
    And(a=jgecond1, b=jgecond2, out=jge);
    And(a=nout, b=instruction[2], out=jlt);
    Or(a=nout, b=pos, out=jnecond1);
    And(a=instruction[2], b=instruction[0], out=jnecond2);
    And(a=jnecond1, b=jnecond2, out=jne);
    Or(a=nout, b=zout, out=jlecond1);
    And(a=instruction[2], b=instruction[1], out=jlecond2);
    And(a=jlecond1, b=jlecond2, out=jle);
    And(a=instruction[2], b=instruction[1], out=jmpcond1);
    And(a=jmpcond1, b=instruction[0], out=jmp);
    Or(a=jgt, b=jeq, out=load1);
    Or(a=jge, b=load1, out=load2);
    Or(a=jlt, b=load2, out=load3);
    Or(a=jne, b=load3, out=load4);
    Or(a=jle, b=load4, out=load5);
    Or(a=jmp, b=load5, out=preload);
    And(a=preload, b=instruction[15], out=load);
    PC(in=ARegOut, load=load, inc=true, reset=reset, out[0..14]=pc);
}