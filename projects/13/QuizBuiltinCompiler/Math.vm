function Math.init 0
push constant 0
return
function Math.abs 0
push argument 0
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
neg
return
goto IF_END0
label IF_FALSE0
push argument 0
return
label IF_END0
function Math.divide 1
push argument 0
call Math.abs 1
push argument 1
call Math.abs 1
call Math._div 2
pop local 0
push argument 0
push constant 0
lt
push argument 1
push constant 0
lt
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
return
goto IF_END0
label IF_FALSE0
push local 0
neg
return
label IF_END0
function Math._div 1
push argument 1
push argument 0
gt
push argument 1
push constant 0
lt
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push argument 0
push argument 1
push argument 1
add
call Math._div 2
pop local 0
push argument 0
push local 0
push argument 1
call Math.multiply 2
push local 0
push argument 1
call Math.multiply 2
add
sub
push argument 1
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 0
push local 0
add
return
goto IF_END1
label IF_FALSE1
push local 0
push local 0
add
push constant 1
add
return
label IF_END1
function Math.multiply 5
push argument 0
pop local 1
push constant 16
pop local 3
label WHILE_EXP0
push local 2
push local 3
lt
not
if-goto WHILE_END0
push local 4
call Math._nextMask 1
pop local 4
push local 2
push constant 1
add
pop local 2
push argument 1
push local 4
and
push constant 0
eq
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
push local 1
add
pop local 0
label IF_FALSE0
push local 1
push local 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push local 0
return
function Math.sqrt 4
push constant 0
pop local 0
push constant 16
pop local 1
push local 1
push constant 2
call Math.divide 2
push constant 1
sub
pop local 2
label WHILE_EXP0
push local 2
push constant 1
neg
gt
not
if-goto WHILE_END0
push local 0
push constant 2
push local 2
call Math.exp 2
add
push local 0
push constant 2
push local 2
call Math.exp 2
add
call Math.multiply 2
pop local 3
push local 3
push argument 0
lt
push local 3
push argument 0
eq
or
push local 3
push constant 0
gt
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
push constant 2
push local 2
call Math.exp 2
add
pop local 0
label IF_FALSE0
push local 2
push constant 1
sub
pop local 2
goto WHILE_EXP0
label WHILE_END0
push local 0
return
function Math.exp 2
push argument 0
pop local 0
push argument 1
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 1
return
label IF_FALSE0
label WHILE_EXP0
push local 1
push argument 1
push constant 1
sub
lt
not
if-goto WHILE_END0
push local 0
push argument 0
call Math.multiply 2
pop local 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push local 0
return
function Math.max 0
push argument 0
push argument 1
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
return
goto IF_END0
label IF_FALSE0
push argument 1
return
label IF_END0
function Math.min 0
push argument 0
push argument 1
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
return
goto IF_END0
label IF_FALSE0
push argument 1
return
label IF_END0
function Math._nextMask 0
push argument 0
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 1
return
goto IF_END0
label IF_FALSE0
push argument 0
push argument 0
add
return
label IF_END0
