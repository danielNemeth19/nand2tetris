/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array s;
    field int length, max_len;
    static Array ascii_map;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        var int counter;

        if (maxLength = 0) {
            let maxLength = maxLength + 1;
        }
        let max_len = maxLength;
        let s = Array.new(maxLength);
        let length = 0;

        // digits have ascii codes between: 48 - 57
        let ascii_map = Array.new(10);
        while (counter < 10){
            let ascii_map[counter] = 48 + counter;
            let counter = counter + 1;
        }
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do s.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if (j > (length - 1) ){
            do Output.printString("j is out-of-range: ");
            return Sys.error(15);
        }
        return s[j];
    }

    /** Sets the character at the j-th location of this string to c.
     *  To be clear - this function can only change chars within the
     *  range of the actual length (i.e. already set chars)
     * -> to append, use appendChar!! */
    method void setCharAt(int j, char c) {
        if (j > (length - 1) ){
            do Output.printString("j is out-of-range: ");
            do Sys.error(16);
            return;
        }
        let s[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let s[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let s[length -1] = 0;
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
        var int val, counter, d, sign;
        var char d_as_char;

        let sign = 1;
        let val = 0;
        while (counter < length){
            let d = s[counter];
            if (d=45){
                let sign = -1;
            }
            else {
                let d = String._get_int_for_ascii(d);
                if (d=0) {
                    return Math.multiply(sign, val);
                }
                else {
                    let val = Math.multiply(val, 10) + d;
                }
            }
            let counter = counter + 1;
        }
        return Math.multiply(sign, val);
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int mod_v;
        var char c;
        var boolean is_positive;

        let is_positive = true;

        if (length > 0){
            do s.dispose();
            let s = Array.new(max_len);
            let length = 0;
        }
        if (val < 0) {
            let val = Math.abs(val);
            let is_positive = false;
        }

        let mod_v = val - (Math.divide(val, 10) * 10);
        let c = String._get_ascii_for_int(mod_v);

        if (val < 10) {
            if (~is_positive) {
                do appendChar(45);
            }
            do appendChar(c);
            return;
        }
        else {
            if (~is_positive) {
                do setInt(Math.divide(-val, 10));
            }
            else {
                do setInt(Math.divide(val, 10));
            }
            do appendChar(c);
            return;
        }
    }


    function int _get_ascii_for_int(int val) {
        if (val > 9){
            do Output.printInt(val);
            do Output.printString(" has two digits-> ");
            return Sys.error(15);
        }
        else {
            return ascii_map[val];
        }
    }

    function int _get_int_for_ascii(int digit_code) {
        if ((digit_code < 48) | (57 < digit_code)) {
            return 0;
        }
        else {
            return digit_code - 48;
        }
    }


    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
